// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.


// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

// version 300 code
_centroid in vec2 uv;

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv;

#endif

#ifndef _UNIFORM_ENTITY_CONSTANTS_H
#define _UNIFORM_ENTITY_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
uniform ActorConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ActorConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 OVERLAY_COLOR;
UNIFORM vec4 TILE_LIGHT_COLOR;
UNIFORM vec4 CHANGE_COLOR;
UNIFORM vec4 GLINT_COLOR;
UNIFORM vec4 UV_ANIM;
UNIFORM vec2 UV_OFFSET;
UNIFORM vec2 UV_ROTATION;
UNIFORM vec2 GLINT_UV_SCALE;
UNIFORM vec4 MULTIPLICATIVE_TINT_CHANGE_COLOR;
END_UNIFORM_BLOCK

#endif

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
#define USE_TEXEL_AA 0
#else
#define USE_TEXEL_AA 1
#endif

#ifdef ALPHA_TEST
#define USE_ALPHA_TEST 1
#else
#define USE_ALPHA_TEST 0
#endif

#if __VERSION__ >= 300

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif


#if USE_TEXEL_AA

const float TEXEL_AA_LOD_CONSERVATIVE = -1.0;
const float TEXEL_AA_LOD_RELAXED = 2.0;

vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {

	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;

	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
	highp vec2 adjustmentScalar = max(1.0 / vec2(length(delU), length(delV)), 1.0);

	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * adjustmentScalar, 0.0, 0.5) + clamp(fractionalTexel * adjustmentScalar - (adjustmentScalar - 0.5), 0.0, 0.5);

	highp float lod = log2(sqrt(max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY))) * 2.0);
	highp float samplingMode = smoothstep(TEXEL_AA_LOD_RELAXED, TEXEL_AA_LOD_CONSERVATIVE, lod);

	highp vec2 adjustedUV = (adjustedFractionalTexel + floor(originalUV * TEXTURE_DIMENSIONS.xy)) / TEXTURE_DIMENSIONS.xy;
	lowp vec4 blendedSample = texture2D(source, mix(originalUV, adjustedUV, samplingMode));

	#if USE_ALPHA_TEST
		return vec4(blendedSample.rgb, mix(blendedSample.a, smoothstep(1.0/2.0, 1.0, blendedSample.a), samplingMode));
	#else
		return blendedSample;
	#endif
}

#endif // USE_TEXEL_AA

#endif //__VERSION__ >= 300


LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;

#if defined(RNGL_SHADOW)
	#ifndef _UNIFORM_EXTRA_VECTOR_CONSTANTS_H
#define _UNIFORM_EXTRA_VECTOR_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 1) uniform SfxConstants {
#endif
// BEGIN_UNIFORM_BLOCK(SfxConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 EXTRA_VECTOR1;
UNIFORM vec4 EXTRA_VECTOR2;
UNIFORM vec4 EXTRA_VECTOR3;
UNIFORM vec4 EXTRA_VECTOR4;
UNIFORM vec4 SUN_DIR;
UNIFORM vec4 WATER_TEXTURE_UV_RANGE;
UNIFORM vec4 SKY_NEAR_COLOR;
UNIFORM vec4 SKY_FAR_COLOR;
UNIFORM vec4 RAIN_NEAR_COLOR;
UNIFORM vec4 RAIN_FAR_COLOR;
UNIFORM vec4 COLOR_MAPPING_PARAM;
END_UNIFORM_BLOCK

#endif


#if defined(RNGL_SHADOW_SOFT) && __VERSION__ >= 300
#define samplerType sampler2D
#define samplerFunc sampleShadowPercentage

#else  // RNGL_SHADOW only
#define samplerType sampler2D
#define samplerFunc sampleShadowTexture
#endif


#if defined(RNGL_SHADOW_CASTER) && defined(RNGL_SHADOW_TRANSPARENT)
void clipShadowTransparency(float pixelAlpha) {
	const float thresh[4] = float[4](0.2, 0.6, 0.8, 0.4);
	ivec2 modPos = ivec2(gl_FragCoord.xy) % 2;  // compat with PCF 1x1
	if (pixelAlpha < thresh[modPos.x * 2 + modPos.y])
		discard;
}
#endif

POS3 getShadowSpaceCoord(POS3 worldPos) {
	// world space (translated to view space) to shadow space position
	MAT4 biasedTransform = mat4(EXTRA_VECTOR1, EXTRA_VECTOR2, EXTRA_VECTOR3, EXTRA_VECTOR4);
	POS4 shadowCoord = biasedTransform * vec4(worldPos, 1.0);  // BIAS*PROJ*VIEW (SHADOW)
	return shadowCoord.xyz / shadowCoord.w;
}

float sampleShadowTexture(sampler2D shadowMap, highp vec3 coord, float bias) {
	vec2 size = vec2(textureSize(shadowMap, 0));
	vec3 offset = vec3(1.0 / size, 0.0);
	coord.xy -= 0.5 * offset.xy;  // sample 4 texels with GL_NEAREST to simulate PCF 1x1
	vec2 residue = fract(coord.xy * size);  // highp coord for enough precision (#160582)
	vec4 zBlocker = vec4(
		texture2D(shadowMap, coord.xy + offset.zz).r,
		texture2D(shadowMap, coord.xy + offset.xz).r,
		texture2D(shadowMap, coord.xy + offset.zy).r,
		texture2D(shadowMap, coord.xy + offset.xy).r);
	float zReceiver = coord.z;  // in light if (zBlocker >= zReceiver || zBlocker >= 1.0) (no blocker)
	vec4 samples = min(step(zReceiver, zBlocker) + step(1.0, zBlocker), 1.0);  // bvec || not supported on gles
	
	#ifdef RNGL_SHADOW_TRANSPARENT
		return (samples.s + samples.t + samples.p + samples.q) * 0.25;  // % in light
	#else
		return mix(mix(samples.s, samples.t, residue.x), mix(samples.p, samples.q, residue.x), residue.y);
	#endif
}

#if defined(RNGL_SHADOW_SOFT) && __VERSION__ >= 300
float sampleShadowPercentage(sampler2D shadowMap, vec3 coord, float bias) {
	#ifdef RNGL_SHADOW_SLOW
		int numSamples = 23;
		const vec2 poissonDisk[23] = vec2[](
			vec2(-0.15375204, -0.14084946), vec2( 0.02578044,  0.29375481), vec2( 0.21974229, -0.28661491),
			vec2(-0.41065391,  0.07263889), vec2( 0.39340293,  0.25025074), vec2(-0.13259392, -0.49324276),
			vec2(-0.25427194,  0.48958514), vec2( 0.55398148, -0.20231315), vec2(-0.57821812, -0.23868003),
			vec2( 0.27947577,  0.59722349), vec2( 0.20697397, -0.65986563), vec2(-0.62495514,  0.36217428),
			vec2( 0.73427404,  0.16142809), vec2(-0.44870994, -0.63824372), vec2(-0.10378174,  0.80087656),
			vec2( 0.63776135, -0.53750594), vec2(-0.85899279, -0.03552205), vec2( 0.62706717,  0.62401559),
			vec2(-0.04198309, -0.90792311), vec2(-0.59746436,  0.71596198), vec2( 0.94699961, -0.12741746),
			vec2(-0.80281529, -0.55857797), vec2( 0.21948137,  0.97561669));
	#else
		int numSamples = 11;
		const vec2 poissonDisk[11] = vec2[](
			vec2(-0.22232508, -0.20366799), vec2( 0.03727845,  0.42476876),
			vec2( 0.31774683, -0.41444448), vec2(-0.59380457,  0.10503567),
			vec2( 0.56885970,  0.36186198), vec2(-0.19173049, -0.71322785),
			vec2(-0.36767661,  0.70793894), vec2( 0.80105589, -0.29254433),
			vec2(-0.83610201, -0.34513076), vec2( 0.40412130,  0.86358374),
			vec2( 0.29928386, -0.95416412));
	#endif

	vec2 uvShadow = coord.xy;
	float zReceiver = coord.z;
	float lightSize = 0.001 * bias;

	float randAngle = fract(sin(dot(gl_FragCoord.xy, vec2(12.9898, 78.233))) * 43758.5453);
	vec2 sampleJitter1 = vec2(cos(randAngle), -sin(randAngle));
	vec2 sampleJitter2 = vec2(-sampleJitter1.y, sampleJitter1.x);

	float searchRadius = lightSize;
	int numBlockers = 0;

	int numTest = 0;  // try early exit
	for (int i = 1; i < numSamples; i += 2, numTest++) {
		vec2 offset = vec2(dot(poissonDisk[i], sampleJitter1), dot(poissonDisk[i], sampleJitter2));
		float zBlocker = texture2D(shadowMap, uvShadow + offset * searchRadius).r;
		if (zBlocker < zReceiver && zBlocker < 1.0) {
			numBlockers++;
		}
	}
	if (numBlockers == 0 || numBlockers == numTest) {
		#ifdef RNGL_SHADOW_DEBUG
			return 2.0;
		#else
			return 1.0 - step(0.5, float(numBlockers));
		#endif
	}

	for (int i = 0; i < numSamples; i += 2) {
		vec2 offset = vec2(dot(poissonDisk[i], sampleJitter1), dot(poissonDisk[i], sampleJitter2));
		float zBlocker = texture2D(shadowMap, uvShadow + offset * searchRadius).r;
		if (zBlocker < zReceiver && zBlocker < 1.0) {
			numBlockers++;
		}
	}
	return 1.0 - float(numBlockers) / float(numSamples);
}
#endif

vec4 getShadowedLight(samplerType shadowMap, vec4 inLight, vec3 lightDir, float baseBias, POS3 worldPos, vec3 worldNormal) {
	POS3 shadowCoord = getShadowSpaceCoord(worldPos + fract(baseBias) * worldNormal);
	bool inside = shadowCoord.x > 0.0 && shadowCoord.x < 1.0 && shadowCoord.y > 0.0 && shadowCoord.y < 1.0;
	float mask = inside ? samplerFunc(shadowMap, shadowCoord, floor(baseBias)) : 1.0;

	float light = smoothstep(0.0, 0.2, dot(worldNormal, lightDir));
	inLight.rgb = vec3(mix(0.65, 1.0, min(light, mask)));

	#ifdef RNGL_SHADOW_DEBUG
		inLight.rgb = (mask == 2.0) ? vec3(0.0, 10.0, 0.0) : vec3(mask);
	#endif

	return inLight;
}

#undef samplerType
#undef samplerFunc

	varying POS3 worldPos;
	varying vec3 worldNormal;
#endif

#ifdef USE_OVERLAY
    // When drawing horses on specific android devices, overlay color ends up being garbage data.
    // Changing overlay color to high precision appears to fix the issue on devices tested
	varying highp vec4 overlayColor;
#endif

varying vec4 light;
varying vec4 fogColor;

#if defined(USE_BRIGHT) || defined(RNGL_SHADOW)
uniform vec4 HIDE_COLOR;
#endif


void main() {
	vec4 color = vec4(1.0);

#ifdef USE_BLOOM
	vec4 bloomMask = vec4(1.0);
#endif

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	color = texture2D( TEXTURE_0, uv );
#if defined(USE_BLOOM) && !defined(RNGL_SHADOW)
	bloomMask = texture2D( TEXTURE_1, uv);
#endif
#else
	color = texture2D_AA(TEXTURE_0, uv);
#if defined(USE_BLOOM) && !defined(RNGL_SHADOW)
	bloomMask = texture2D_AA(TEXTURE_1, uv);
#endif
#endif // !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)

#if defined(RNGL_SHADOW_CASTER) && defined(RNGL_SHADOW_TRANSPARENT)
	clipShadowTransparency(color.a);
#endif

#ifdef USE_OVERLAY
	//use either the diffuse or the OVERLAY_COLOR
	color.rgb = mix(color, overlayColor, overlayColor.a).rgb;
#endif

#ifdef USE_BRIGHT
	color.rgb *= HIDE_COLOR.a;
#endif

#ifdef USE_BLOOM
	//bloom overrides emissive
	color.rgb *= (bloomMask.r < 0.1) ? light.rgb : vec3(bloomMask.r);
#else
#ifdef USE_EMISSIVE
	//make glowy stuff
	color *= mix(vec4(1.0), light, color.a);
#else
#ifdef RNGL_SHADOW
	color *= getShadowedLight(TEXTURE_1, light, HIDE_COLOR.xyz, HIDE_COLOR.a, worldPos, worldNormal);
#else
	color *= light;
#endif  // RNGL_SHADOW
#endif  // USE_EMISSIVE
#endif  // USE_BLOOM

	//apply fog
	color.rgb = mix(color.rgb, fogColor.rgb, fogColor.a);

	gl_FragColor = color;
}
