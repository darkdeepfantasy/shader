// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.


// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

// version 300 code
_centroid in vec2 uv;

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv;

#endif

#ifndef _UNIFORM_PER_FRAME_CONSTANTS_H
#define _UNIFORM_PER_FRAME_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 2) uniform PerFrameConstants {
#endif
// BEGIN_UNIFORM_BLOCK(PerFrameConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec3 VIEW_POS;
#ifdef MCPE_NETEASE
// TIME will loop from [0, 210]
// make sure your shader handles the case when it transitions from 210 to 0
#endif
UNIFORM float TIME;
#ifdef MCPE_NETEASE
UNIFORM vec4 BLEND_COLOR;
UNIFORM vec4 USER_FOR_COLOR_NEAR;
UNIFORM vec4 USER_FOR_COLOR_FAR;
#endif
UNIFORM vec4 FOG_COLOR;
UNIFORM vec2 FOG_CONTROL;
UNIFORM float RENDER_DISTANCE;
UNIFORM float FAR_CHUNKS_DISTANCE;
UNIFORM float OCCLUSION_HEIGHT_OFFSET;
END_UNIFORM_BLOCK

#endif

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
#define USE_TEXEL_AA 0
#else
#define USE_TEXEL_AA 1
#endif

#ifdef ALPHA_TEST
#define USE_ALPHA_TEST 1
#else
#define USE_ALPHA_TEST 0
#endif

#if __VERSION__ >= 300

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif


#if USE_TEXEL_AA

const float TEXEL_AA_LOD_CONSERVATIVE = -1.0;
const float TEXEL_AA_LOD_RELAXED = 2.0;

vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {

	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;

	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
	highp vec2 adjustmentScalar = max(1.0 / vec2(length(delU), length(delV)), 1.0);

	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * adjustmentScalar, 0.0, 0.5) + clamp(fractionalTexel * adjustmentScalar - (adjustmentScalar - 0.5), 0.0, 0.5);

	highp float lod = log2(sqrt(max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY))) * 2.0);
	highp float samplingMode = smoothstep(TEXEL_AA_LOD_RELAXED, TEXEL_AA_LOD_CONSERVATIVE, lod);

	highp vec2 adjustedUV = (adjustedFractionalTexel + floor(originalUV * TEXTURE_DIMENSIONS.xy)) / TEXTURE_DIMENSIONS.xy;
	lowp vec4 blendedSample = texture2D(source, mix(originalUV, adjustedUV, samplingMode));

	#if USE_ALPHA_TEST
		return vec4(blendedSample.rgb, mix(blendedSample.a, smoothstep(1.0/2.0, 1.0, blendedSample.a), samplingMode));
	#else
		return blendedSample;
	#endif
}

#endif // USE_TEXEL_AA

#endif //__VERSION__ >= 300


LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0; // blur color
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1; // clear color
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2; // depth texture

uniform vec4 DEPTH_OF_FIELD_VECTOR4_1; // { radius, mFocusDistance, mNearEndDepth, mFarStartDepth }
uniform float DEPTH_OF_FIELD_FLOAT1_1; // switch
uniform vec4 EXTRA_VECTOR4;  // Screen Info vec4(width, height, pixelWidth, pixelHeight)

vec4 Dual_Kawase_Blur_Upsample() {
	vec3 sum = vec3(0.0,0.0,0.0);
    vec2 pixelSize = EXTRA_VECTOR4.zw;
	float radius = DEPTH_OF_FIELD_VECTOR4_1.x;

    sum += texture(TEXTURE_0, uv + vec2(pixelSize.x * -1.0, pixelSize.y * 1.0) * radius).rgb * 2.0;
    sum += texture(TEXTURE_0, uv + vec2(pixelSize.x * 1.0, pixelSize.y * 1.0) * radius).rgb * 2.0;
    sum += texture(TEXTURE_0, uv + vec2(pixelSize.x * -1.0, pixelSize.y * -1.0) * radius).rgb * 2.0;
    sum += texture(TEXTURE_0, uv + vec2(pixelSize.x * 1.0, pixelSize.y * -1.0) * radius).rgb * 2.0;

    sum += texture(TEXTURE_0, uv + vec2(0.0 , pixelSize.y * 2.0) * radius).rgb;
    sum += texture(TEXTURE_0, uv + vec2(pixelSize.x * 2.0 , 0.0) * radius).rgb;
    sum += texture(TEXTURE_0, uv + vec2(0.0 , pixelSize.y * -2.0) * radius).rgb;
    sum += texture(TEXTURE_0, uv + vec2(pixelSize.x * -2.0 , 0.0) * radius).rgb;  
   
    sum = sum * 0.0833;
	return vec4(sum, 1.0);
}

float MakeDepthLinear(float z, float n, float f)
{
    // scale z to [0,1]
	z = 2.0 * z - 1.0;
	return (2.0 * n) / (f + n - z * (f - n));
}

float DepthToViewZ(float z, float n, float f) 
{
	return (f*n)/(f-z*(f-n));
}

float ViewZToNonLinearDepth(float viewZ, float n , float f) {
	float s = step(viewZ, 0.0);
	viewZ = 0.025 * s + (1.0-s) * viewZ;
	return  f * (viewZ - n) / ((f-n) * viewZ);
}

//vec4 detpt_test() {
//	float depth = texture(TEXTURE_2, uv).r;
//	depth = MakeDepthLinear(depth, 0.025, FAR_CHUNKS_DISTANCE);
//	return vec4( depth, depth, depth ,1.0);
//}

vec4 depth_sample_defined(vec4 blurColor, vec4 clearColor, float depth, float nearBlurScale, float farBlurScale){ 

	vec4 finalColor = vec4(0.0,0.0,0.0,1.0);

	// use self-defined focus
	float focus = DEPTH_OF_FIELD_VECTOR4_1.y;
	float realZ = DepthToViewZ(depth, 0.025, FAR_CHUNKS_DISTANCE);

	depth = MakeDepthLinear(depth, 0.025, FAR_CHUNKS_DISTANCE);

	float focusTest = clamp(sign(realZ-focus),0.0,1.0);
	float ratio1 = (realZ - focus) / (FAR_CHUNKS_DISTANCE-0.025);
	float ratio2 = (focus - realZ) / (FAR_CHUNKS_DISTANCE-0.025);
	finalColor = (1.0-focusTest)*clearColor + focusTest*mix(clearColor,blurColor,clamp((ratio1)* farBlurScale,0.0,1.0));
	finalColor = focusTest * finalColor + (1.0-focusTest)*mix(clearColor,blurColor,clamp((ratio2)*nearBlurScale,0.0,1.0));

	return finalColor;
}

vec4 depth_sample_auto(vec4 blurColor, vec4 clearColor, float depth, float nearBlurScale, float farBlurScale){
	vec4 finalColor = vec4(0.0,0.0,0.0,1.0);
	// use auto focus
	float centerDepth = texture(TEXTURE_2, vec2(0.5,0.5)).r;
	depth = MakeDepthLinear(depth, 0.025, FAR_CHUNKS_DISTANCE);
	centerDepth = MakeDepthLinear(centerDepth, 0.025, FAR_CHUNKS_DISTANCE);
	float focusTest2 = clamp(sign(depth-centerDepth),0.0,1.0);
	finalColor = (1.0-focusTest2)*clearColor + focusTest2*mix(clearColor,blurColor,clamp((depth-centerDepth)* farBlurScale,0.0,1.0));
	finalColor = focusTest2 * finalColor + (1.0-focusTest2)*mix(clearColor,blurColor,clamp((centerDepth-depth)*nearBlurScale,0.0,1.0));

	return finalColor;

}

vec4 depth_sample2(vec4 color){
	// common
	vec4 blurColor = color; //texture(TEXTURE_0, uv);
    vec4 clearColor = texture(TEXTURE_1, uv);
	float depth = texture(TEXTURE_2, uv).r;

	float nearBlurScale = DEPTH_OF_FIELD_VECTOR4_1.z;
	float farBlurScale = DEPTH_OF_FIELD_VECTOR4_1.w;
	
	float useAuto = DEPTH_OF_FIELD_FLOAT1_1;
	vec4 finalColor = vec4(0.0,0.0,0.0,1.0);
	if(useAuto >= 1.0) {
		finalColor = depth_sample_auto(blurColor, clearColor, depth , nearBlurScale, farBlurScale);
	}
	else{
		finalColor = depth_sample_defined(blurColor, clearColor, depth , nearBlurScale, farBlurScale);
	}
	return finalColor;
}

void main(){

	vec4 color = Dual_Kawase_Blur_Upsample();
    gl_FragColor = depth_sample2(color);

}
